{"version":3,"sources":["../src/error-handling.ts","../src/errors/base.ts","../src/errors/fetch-error.ts","../src/errors/schema-error.ts","../src/errors/env-error.ts"],"names":[],"mappings":";AAgBO,SAAS,GAAM,KAAsB;AAC1C,SAAO,EAAE,IAAI;AACf;AACO,SAAS,IAAyB,KAAsB;AAC7D,SAAO,EAAE,IAAI;AACf;AAKA,eAAsB,KACpB,GACA,cACuB;AACvB,MAAI;AACF,WAAO,GAAG,MAAM,CAAC;AAAA,EACnB,SAAS,GAAG;AACV,WAAO,IAAI,aAAa,CAAU,CAAC;AAAA,EACrC;AACF;;;ACjCO,IAAe,YAAf,cAA+E,MAAM;AAAA,EAE1E;AAAA,EACA;AAAA,EAGhB,YAAY,MAIT;AACD,UAAM,KAAK,OAAO;AAClB,SAAK,QAAQ,KAAK;AAClB,SAAK,UAAU,KAAK;AAAA,EACtB;AAAA,EAEO,WAAmB;AACxB,WAAO,GAAG,KAAK,IAAI,KAAK,KAAK,OAAO,MAAM,KAAK;AAAA,MAC7C,KAAK;AAAA,IACP,CAAC,gBAAgB,KAAK,OAAO,SAAS,CAAC;AAAA,EACzC;AACF;;;AClBO,IAAM,aAAN,MAAM,oBAAmB,UAI7B;AAAA,EACe;AAAA,EACA,OAAO,YAAW;AAAA,EAElC,YAAY,MAUT;AACD,UAAM,IAAI;AACV,SAAK,QAAQ,KAAK;AAAA,EACpB;AACF;;;ACrBO,IAAM,cAAN,MAAM,qBAAoB,UAA4B;AAAA,EAC3C,QAAQ;AAAA,EACR,OAAO,aAAY;AAAA,EAEnC,YAAY,MAIT;AACD,UAAM;AAAA,MACJ,GAAG;AAAA,IACL,CAAC;AAAA,EACH;AAAA,EACA,OAAO,QAAW,GAAgB,KAAc,SAAgD;AAC9F,WAAO,IAAI,aAAY;AAAA,MACrB,SAAS,EAAE;AAAA,MACX,SAAS;AAAA,QACP,KAAK,KAAK,UAAU,GAAG;AAAA,QACvB,GAAG;AAAA,MACL;AAAA,IACF,CAAC;AAAA,EACH;AACF;;;ACvBO,IAAM,WAAN,MAAM,kBAAiB,UAE3B;AAAA,EACe,QAAQ;AAAA,EACR,OAAO,UAAS;AAClC","sourcesContent":["import type { BaseError } from \"./errors/base\";\n\ntype OkResult<V> = {\n  val: V;\n  err?: never;\n};\n\ntype ErrResult<E extends BaseError> = {\n  val?: never;\n  err: E;\n};\n\nexport type Result<V, E extends BaseError = BaseError> = OkResult<V> | ErrResult<E>;\n\nexport function Ok(): OkResult<never>;\nexport function Ok<V>(val: V): OkResult<V>;\nexport function Ok<V>(val?: V): OkResult<V> {\n  return { val } as OkResult<V>;\n}\nexport function Err<E extends BaseError>(err: E): ErrResult<E> {\n  return { err };\n}\n\n/**\n * wrap catches thrown errors and returns a `Result`\n */\nexport async function wrap<T, E extends BaseError>(\n  p: Promise<T>,\n  errorFactory: (err: Error) => E,\n): Promise<Result<T, E>> {\n  try {\n    return Ok(await p);\n  } catch (e) {\n    return Err(errorFactory(e as Error));\n  }\n}\n","export type ErrorContext = Record<string, unknown>;\n\nexport abstract class BaseError<TContext extends ErrorContext = ErrorContext> extends Error {\n  public abstract readonly retry: boolean;\n  public readonly cause: BaseError | undefined;\n  public readonly context: TContext | undefined;\n  public abstract readonly name: string;\n\n  constructor(opts: {\n    message: string;\n    cause?: BaseError;\n    context?: TContext;\n  }) {\n    super(opts.message);\n    this.cause = opts.cause;\n    this.context = opts.context;\n  }\n\n  public toString(): string {\n    return `${this.name}: ${this.message} - ${JSON.stringify(\n      this.context,\n    )} - caused by ${this.cause?.toString()}`;\n  }\n}\n","import { BaseError } from \"./base\";\n\n/**\n * Fetch Errors\n */\nexport class FetchError extends BaseError<{\n  url: string;\n  method: string;\n  [more: string]: unknown;\n}> {\n  public readonly retry: boolean;\n  public readonly name = FetchError.name;\n\n  constructor(opts: {\n    message: string;\n\n    retry: boolean;\n    cause?: BaseError;\n    context?: {\n      url: string;\n      method: string;\n      [more: string]: unknown;\n    };\n  }) {\n    super(opts);\n    this.retry = opts.retry;\n  }\n}\n","import type { ZodError } from \"zod\";\nimport { BaseError } from \"./base\";\n\n/**\n * An object does not have the required schema.\n */\nexport class SchemaError extends BaseError<{ raw: unknown }> {\n  public readonly retry = false;\n  public readonly name = SchemaError.name;\n\n  constructor(opts: {\n    message: string;\n    context?: { raw: unknown };\n    cause?: BaseError;\n  }) {\n    super({\n      ...opts,\n    });\n  }\n  static fromZod<T>(e: ZodError<T>, raw: unknown, context?: Record<string, unknown>): SchemaError {\n    return new SchemaError({\n      message: e.message,\n      context: {\n        raw: JSON.stringify(raw),\n        ...context,\n      },\n    });\n  }\n}\n","import { BaseError } from \"./base\";\n\n/**\n * Env Errors indicate an environment variable was not configured properly\n */\nexport class EnvError extends BaseError<{\n  name: string;\n}> {\n  public readonly retry = false;\n  public readonly name = EnvError.name;\n}\n"]}